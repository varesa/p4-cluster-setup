---

- hosts: hypervisors
  tasks:
  - set_fact:
      hostid: "{{ ansible_management.ipv4.address.split('.')[3]}}"

  - assert:
      that:
        - hostid|int > 0
        - hostid|int < 255


  - name: Create management port
    openvswitch_port:
      bridge: br-ex
      port: management
      state: present
      set: interface management type=internal
      tag: 2100

  - name: Create overlay port
    openvswitch_port:
      bridge: br-ex
      port: overlay
      state: present
      set: interface overlay type=internal
      tag: 2101

  - name: Create storage port
    openvswitch_port:
      bridge: br-ex
      port: storage
      state: present
      set: interface storage type=internal
      tag: 2102

  - copy:
      dest: /etc/systemd/system/networking.service
      content: |
        [Unit]
        Description=Configure network interfaces
        After=openvswitch.service
        Before=network-online.target

        [Service]
        Type=oneshot
        # Bring physical uplinks and virtual ports up
        ExecStart=/sbin/ip link set eno1 up
        ExecStart=/sbin/ip link set eno2 up

        ExecStart=/sbin/ip link set management up
        ExecStart=/sbin/ip link set overlay up
        ExecStart=/sbin/ip link set storage up

        # Allow failure in case addresses already exist
        ExecStart=-/sbin/ip address add 10.4.0.{{ hostid }}/24 dev management
        ExecStart=-/sbin/ip address add 10.4.1.{{ hostid }}/24 dev overlay
        ExecStart=-/sbin/ip address add 10.4.2.{{ hostid }}/24 dev storage

        ExecStart=-/sbin/ip route add default via 10.4.0.1

        # Update ARP tables if interfaces changed
        ExecStart=-/sbin/arping -U -c 3 -I management 10.4.0.{{ hostid }}
        ExecStart=-/sbin/arping -U -c 3 -I overlay 10.4.1.{{ hostid }}
        ExecStart=-/sbin/arping -U -c 3 -I storage 10.4.2.{{ hostid }}

        [Install]
        RequiredBy=multi-user.target
    register: service_unit

  - command: systemctl daemon-reload
    when: service_unit.changed

  - systemd:
      name: networking.service
      state: "{{ 'restarted' if service_unit.changed else 'started' }}"
